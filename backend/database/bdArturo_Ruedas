-- Crear tabla bicicleta
CREATE TABLE bicicleta (
    ID_bicicleta SERIAL PRIMARY KEY,
    tipo VARCHAR(25) NOT NULL,
    nombre_personalizado VARCHAR(25) NOT NULL,
    fecha_creacion VARCHAR(25) NOT NULL
);

-- Crear tabla componentes
CREATE TABLE componentes (
    ID_componentes SERIAL PRIMARY KEY,
    tipo_bicicleta VARCHAR(25) NOT NULL,
    nombre VARCHAR(25) NOT NULL,
    categoria VARCHAR(25) NOT NULL,
    imagen VARCHAR(25) NOT NULL
);

-- Crear tabla usuario
CREATE TABLE usuario (
    ID_usuario SERIAL PRIMARY KEY,
    nombre VARCHAR(25) NOT NULL,
    correo VARCHAR(50) NOT NULL,
    contrase침a VARCHAR(25) NOT NULL,
    telefono VARCHAR(10) NOT NULL,
    bicicletaID_bicicleta INTEGER,
    CONSTRAINT fk_bicicleta FOREIGN KEY (bicicletaID_bicicleta) REFERENCES bicicleta(ID_bicicleta)
);

-- Insertar un usuario de ejemplo
INSERT INTO usuario (nombre, correo, contrase침a, telefono)
VALUES ('cristian', 'cris@gmail.com', '123', '3236870976');

-- Crear tabla usuario administrador
CREATE TABLE usuarioadmin (
    ID_administrador SERIAL PRIMARY KEY,
    usuario VARCHAR(20) NOT NULL,
    contrase침a VARCHAR(25) NOT NULL,
    contrase침a2 VARCHAR(25) NOT NULL
)

--usuario administrador
INSERT INTO usuarioadmin ( usuario, contrase침a, contrase침a2)
    VALUES ('123', '123', '')

INSERT INTO usuarioadmin ( usuario, contrase침a, contrase침a2)
    VALUES ('123', '123', '123')


-- Crear tabla com_ventas
CREATE TABLE com_ventas (
    ID_publicacion SERIAL PRIMARY KEY,
    nombre_Articulo VARCHAR(25) NOT NULL,
    precio VARCHAR(25) NOT NULL,
    descripcion VARCHAR(500) NOT NULL,
    tipo_bicicleta VARCHAR(50),
    tipo_componente VARCHAR(50),
    ID_usuario INTEGER NOT NULL,
    CONSTRAINT fk_usuario_ventas FOREIGN KEY (ID_usuario) REFERENCES usuario(ID_usuario)
);

CREATE TABLE com_ventas_fotos (
    ID_foto SERIAL PRIMARY KEY,
    ID_publicacion INTEGER NOT NULL,
    url_foto VARCHAR(1000) NOT NULL,
    CONSTRAINT fk_publicacion_fotos FOREIGN KEY (ID_publicacion) REFERENCES com_ventas(ID_publicacion) ON DELETE CASCADE
);

-- Crear tabla com_ventas_usuario
CREATE TABLE com_ventas_usuario (
    com_ventasID_publicacion INTEGER,
    usuario_ID_usuario INTEGER,
    PRIMARY KEY (com_ventasID_publicacion, usuario_ID_usuario),
    CONSTRAINT fk_ventas FOREIGN KEY (com_ventasID_publicacion) REFERENCES com_ventas(ID_publicacion),
    CONSTRAINT fk_usuario_venta FOREIGN KEY (usuario_ID_usuario) REFERENCES usuario(ID_usuario)
);

-- Crear tabla com_ventas_componentes
CREATE TABLE com_ventas_componentes (
    com_ventasID_publicacion INTEGER,
    componentesID_componentes INTEGER,
    PRIMARY KEY (com_ventasID_publicacion, componentesID_componentes),
    CONSTRAINT fk_ventas_componentes FOREIGN KEY (com_ventasID_publicacion) REFERENCES com_ventas(ID_publicacion),
    CONSTRAINT fk_componentes FOREIGN KEY (componentesID_componentes) REFERENCES componentes(ID_componentes)
);

-- Crear tabla carrito (con ON DELETE CASCADE)
CREATE TABLE carrito (
    ID_carrito SERIAL PRIMARY KEY,
    ID_publicacion INTEGER NOT NULL,
    ID_usuario INTEGER NOT NULL,
    ID_vendedor INTEGER,
    CONSTRAINT fk_ID_publicacion FOREIGN KEY (ID_publicacion) 
        REFERENCES com_ventas(ID_publicacion) 
        ON DELETE CASCADE,  -- 游녣 este es el cambio importante
    CONSTRAINT fk_ID_usuario FOREIGN KEY (ID_usuario) 
        REFERENCES usuario(ID_usuario),
    CONSTRAINT fk_vendedor FOREIGN KEY (ID_vendedor) 
        REFERENCES usuario(ID_usuario)
);

CREATE TABLE IF NOT EXISTS user_tokens (
    ID SERIAL PRIMARY KEY,
    ID_usuario INT NOT NULL,
    token TEXT UNIQUE NOT NULL,
    fecha_registro TIMESTAMP DEFAULT NOW(),
    CONSTRAINT fk_usuario FOREIGN KEY (ID_usuario)
        REFERENCES usuario (ID_usuario) ON DELETE CASCADE
);



SELECT * FROM usuario WHERE ID_usuario = $1

SELECT * FROM com_ventas


SELECT 
        cv.ID_publicacion as id,
        cv.nombre_articulo, 
        cv.descripcion, 
        cv.precio, 
        cv.tipo_bicicleta, 
        cv.tipo_componente,
        cv.ID_usuario,
        u.nombre as nombre_vendedor,
        u.telefono,
        COALESCE(
          json_agg(cvf.url_foto) FILTER (WHERE cvf.url_foto IS NOT NULL),
          '[]'
        ) as fotos
      FROM com_ventas cv
      INNER JOIN usuario u ON cv.ID_usuario = u.ID_usuario
      LEFT JOIN com_ventas_fotos cvf ON cv.ID_publicacion = cvf.ID_publicacion
      WHERE cv.nombre_articulo ILIKE $1
      GROUP BY 
        cv.ID_publicacion, 
        cv.nombre_articulo, 
        cv.descripcion, 
        cv.precio, 
        cv.tipo_bicicleta, 
        cv.tipo_componente,
        cv.ID_usuario,
        u.nombre, 
        u.telefono


          SELECT 
        cv.ID_publicacion AS id,
        cv.nombre_Articulo,
        cv.descripcion,
        cv.precio,
        cv.tipo_bicicleta,
        COALESCE(
          json_agg(cvf.url_foto) FILTER (WHERE cvf.url_foto IS NOT NULL),
          '[]'
        ) AS fotos
      FROM com_ventas cv
      JOIN usuario u ON cv.ID_usuario = u.ID_usuario
      LEFT JOIN com_ventas_fotos cvf ON cv.ID_publicacion = cvf.ID_publicacion
      WHERE cv.ID_usuario = $1
      GROUP BY cv.ID_publicacion, cv.nombre_Articulo, cv.descripcion, cv.precio, cv.tipo_bicicleta
      ORDER BY cv.ID_publicacion DESC;

      SELECT * FROM com_ventas_fotos